Index: src/main/java/services/MapReader.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.services;\r\n\r\nimport main.java.models.Continent;\r\nimport main.java.models.Country;\r\nimport main.java.models.Map;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.LinkedHashMap;\r\nimport java.util.List;\r\n\r\n/**\r\n *  This class is responsible for the parsing the map file allowing it to be loaded\r\n * @author Victor\r\n *\r\n *\r\n */\r\npublic class MapReader {\r\n\r\n    /**\r\n     * Reads map file and creates a map with contents of file.\r\n     *\r\n     * @param p_map instance of current map\r\n     * @param p_file All Lines in the map document\r\n     */\r\n    public void readMapFile(Map p_map, List<String> p_file){\r\n        List<Continent> l_continentObjects = parseContinentMapData(p_file);\r\n        List<Country> l_countryObjects = parseCountryMapData(p_file);\r\n        l_continentObjects = linkCountryToContinent(l_countryObjects,l_continentObjects);\r\n        p_map.setD_continents(l_continentObjects);\r\n        p_map.setD_countries(l_countryObjects);\r\n    }\r\n\r\n    /**\r\n     * Reads the corresponding map file lines and extracts continent data.\r\n     *\r\n     * @param p_file All Lines in the map document\r\n     * @return List of continents\r\n     */\r\n    public List<Continent> parseContinentMapData(List<String> p_file){\r\n        List<String> l_continentLines = p_file.subList(\r\n                p_file.indexOf(\"[continents]\") + 1,\r\n                p_file.indexOf(\"[countries]\") - 1);\r\n        List<Continent> l_continents = new ArrayList<Continent>();\r\n        for(String continents: l_continentLines){\r\n            String[] l_continentData = continents.split(\" \");\r\n            l_continents.add(new Continent(l_continentData [0], Integer.parseInt(l_continentData [1])));\r\n        }\r\n        return l_continents;\r\n    }\r\n    /**\r\n     * Reads the corresponding map file lines and extracts continent data.\r\n     *\r\n     * @param p_file All Lines in the map document\r\n     * @return List of countries\r\n     */\r\n     public List<Country> parseCountryMapData(List<String> p_file){\r\n         List<String> l_countryLines = p_file.subList(p_file.indexOf(\"[countries]\") + 1,\r\n                 p_file.indexOf(\"[borders]\") - 1);\r\n\r\n         List<Country> l_countriesList = new ArrayList<Country>();\r\n\r\n         for (String country : l_countryLines) {\r\n             String[] l_countriesData = country.split(\" \");\r\n             l_countriesList.add(new Country(Integer.parseInt(l_countriesData[0]), l_countriesData[1],\r\n                     Integer.parseInt(l_countriesData[2])));\r\n         }\r\n         return parseNeighboursData(p_file,l_countriesList);\r\n     }\r\n\r\n    /**\r\n     * Links the Countries to their respective neighbors.\r\n     *\r\n     * @param p_country Total Country Objects Initialized\r\n     * @param p_file All Lines in the map document\r\n     * @return List Updated Country Objects\r\n     */\r\n     public List<Country> parseNeighboursData(List<String> p_file,List<Country> p_country){\r\n         List<String> l_bordersLines = p_file.subList(p_file.indexOf(\"[borders]\") + 1,\r\n                 p_file.size());\r\n         LinkedHashMap<Integer, List<Integer>> l_countryNeighbors = new LinkedHashMap<>();\r\n\r\n         for (String l_neighbour : l_bordersLines) {\r\n             if (l_neighbour != null && !l_neighbour.isEmpty()) {\r\n                 ArrayList<Integer> l_neighbours = new ArrayList<>();\r\n                 String[] l_neighbourData = l_neighbour.split(\" \");\r\n                 for (int i = 1; i <= l_neighbourData.length - 1; i++) {\r\n                     l_neighbours.add(Integer.parseInt(l_neighbourData[i]));\r\n\r\n                 }\r\n                 l_countryNeighbors.put(Integer.parseInt(l_neighbourData[0]), l_neighbours);\r\n             }\r\n         }\r\n         for (Country c : p_country) {\r\n             List<Integer> l_countryNeighbours = l_countryNeighbors.get(c.getD_countryID());\r\n             c.setD_neighbors(l_countryNeighbours);\r\n         }\r\n         return p_country;\r\n     }\r\n\r\n    /**\r\n     * Links countries to corresponding continents and sets them in object of\r\n     * continent.\r\n     *\r\n     * @param p_countries Country Object\r\n     * @param p_continents Continent Object\r\n     * @return List of updated continents\r\n     */\r\n    public List<Continent> linkCountryToContinent(List<Country> p_countries, List<Continent> p_continents) {\r\n        for (Continent continent : p_continents) {\r\n            for (Country country : p_countries) {\r\n                if (continent.getD_continentID()==country.getD_continentID()) {\r\n                    continent.addCountry(country);\r\n                }\r\n            }\r\n        }\r\n        return p_continents;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/services/MapReader.java b/src/main/java/services/MapReader.java
--- a/src/main/java/services/MapReader.java	(revision 1bc5c50a493e5e0ed8bad471b243ec5f8e87962f)
+++ b/src/main/java/services/MapReader.java	(date 1695934945962)
@@ -48,7 +48,7 @@
         return l_continents;
     }
     /**
-     * Reads the corresponding map file lines and extracts continent data.
+     * Reads the corresponding map file lines and extracts country data.
      *
      * @param p_file All Lines in the map document
      * @return List of countries
Index: src/main/java/models/Map.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.models;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n/**\r\n *  This class is responsible for the map\r\n * @author Victor\r\n *\r\n *\r\n */\r\npublic class Map {\r\n    /**\r\n     * stores the map file name.\r\n     */\r\n    String d_mapFile;\r\n    List<Continent> d_continents;\r\n    List<Country> d_countries;\r\n\r\n    /**\r\n     * getter method that returns the map file.\r\n     *\r\n     * @return d_mapfile\r\n     */\r\n    public String getD_mapFile() {\r\n        return d_mapFile;\r\n    }\r\n\r\n    /**\r\n     * setter method to set the map file.\r\n     *\r\n     * @param p_mapFile mapfile name\r\n     */\r\n    public void setD_mapFile(String p_mapFile) {\r\n        this.d_mapFile = p_mapFile;\r\n    }\r\n\r\n    /**\r\n     * getter method that returns the list of continents.\r\n     *\r\n     * @return d_continents\r\n     */\r\n    public List<Continent> getD_continents() {\r\n        if (d_continents == null) {\r\n            d_continents = new ArrayList<Continent>();\r\n        }\r\n        return d_continents;\r\n    }\r\n\r\n    /**\r\n     * setter method to set the list of continents.\r\n     *\r\n     * @param p_continents list of continents\r\n     */\r\n    public void setD_continents(List<Continent> p_continents) {\r\n        this.d_continents = p_continents;\r\n    }\r\n\r\n    /**\r\n     * getter method that returns the list of countries.\r\n     *\r\n     * @return list of countries\r\n     */\r\n    public List<Country> getD_countries() {\r\n        return d_countries;\r\n    }\r\n\r\n    /**\r\n     * setter method to set the countries.\r\n     *\r\n     * @param p_countries list of countries\r\n     */\r\n    public void setD_countries(List<Country> p_countries) {\r\n        this.d_countries = p_countries;\r\n    }\r\n\r\n    /**\r\n     * adds the country to the map.\r\n     *\r\n     * @param p_country country to add\r\n     */\r\n    public void addCountryToMap(Country p_country){\r\n        d_countries.add(p_country);\r\n    }\r\n\r\n    /**\r\n     * adds the continent to the map.\r\n     *\r\n     * @param p_continent continent to add\r\n     */\r\n    public void addContinentToMap(Continent p_continent){\r\n        d_continents.add(p_continent);\r\n    }\r\n\r\n    /**\r\n     * Get a List of all Ids of continents in Map.\r\n     *\r\n     * @return List of Continent Ids\r\n     */\r\n    public List<Integer> getContinentIDs() {\r\n        return d_continents.stream()\r\n                .map(Continent::getD_continentID)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    /**\r\n     * Get a list of all Ids of countries in Map.\r\n     *\r\n     * @return List of Country Ids\r\n     */\r\n    public List<Integer> getCountryIDs() {\r\n        return d_countries.stream()\r\n                .map(Country::getD_countryID)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    /**\r\n     * Validates map.\r\n     *\r\n     * @return Bool Value if map is valid\r\n     */\r\n    public Boolean validate() {\r\n        //TODO: should be updated\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Ensure continent is not already on the map.\r\n     *\r\n     * @param p_continent List of Continents in the map\r\n     * @param p_continentName name of new continent\r\n     */\r\n    public boolean continentExists(List<Continent> p_continent, String p_continentName) {\r\n        for (Continent obj : p_continent) {\r\n            if (obj.getD_continentName().equalsIgnoreCase(p_continentName)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * Ensure country is not already on the map.\r\n     *\r\n     * @param p_countryName name of new continent\r\n     */\r\n    public boolean countryExists(String p_countryName) {\r\n        for(Country obj: d_countries) {\r\n            if(obj.getD_countryName().equalsIgnoreCase(p_countryName)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * returns continent given continent name.\r\n     *\r\n     * @param p_continentName name of new continent\r\n     */\r\n    public Continent getContinent(String p_continentName) {\r\n        Continent l_continent = null;\r\n        if (d_continents == null || d_continents.isEmpty()) {\r\n            return l_continent;\r\n        }\r\n        for (Continent obj : d_continents) {\r\n            if (obj.getD_continentName().equals(p_continentName)) {\r\n                l_continent = obj;\r\n                break;\r\n            }\r\n        }\r\n        return l_continent;\r\n    }\r\n    /**\r\n     * returns continent given continent name.\r\n     *\r\n     * @param p_countryName name of new continent\r\n     */\r\n    public Country getCountry(String p_countryName) {\r\n        if (d_countries == null) {\r\n            return null;\r\n        }\r\n        for(Country obj:d_countries){\r\n            if(obj.getD_countryName().equalsIgnoreCase(p_countryName)){\r\n                return obj;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    /**\r\n     * Remove Specified Country as a Neighbor from all countries on the map\r\n     *\r\n     * @param p_countryID Country to be removed\r\n     */\r\n    public void removeCountryAsNeighbourFromAll(Integer p_countryID) {\r\n        for (Country c: d_countries) {\r\n            if (c.getD_neighbors()!=null) {\r\n                if (c.getD_neighbors().contains(p_countryID)) {\r\n                    c.removeNeighbour(p_countryID);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Remove Particular Country as Neighbor from all associated countries (in continent Objects)\r\n     *\r\n     * @param p_countryId Country to be removed\r\n     */\r\n    public void updateNeighbours(Integer p_countryId){\r\n        for(Continent c: d_continents){\r\n            c.removeCountryAsNeighbourFromAll(p_countryId);\r\n        }\r\n    }\r\n    /**\r\n     * Performs Add Continent operation on Map.\r\n     *\r\n     * @param p_continentName Name of the Continent to be Added\r\n     * @param p_controlValue Control value of the continent to be added\r\n     */\r\n    public void addContinent(String p_continentName, Integer p_controlValue){\r\n        if (!continentExists(getD_continents(), p_continentName)) {\r\n            Continent l_newContinent = new Continent( p_continentName, p_controlValue);\r\n            d_continents.add(l_newContinent);\r\n            System.out.println(\"[Map]: Inserted a new continent: \" + l_newContinent);\r\n        }\r\n        else {\r\n            System.out.println(\"Continent already exists on the map\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes continent from Map.\r\n     *     Deletes Specified Continent\r\n     *     Deletes all Countries in the Continent along with their data on the Map\r\n     *\r\n     * @param p_continentName Continent Name to be removed\r\n     */\r\n    public boolean removeContinent(String p_continentName) {\r\n        if(d_continents != null) {\r\n            if(continentExists(d_continents,p_continentName)) {\r\n                Continent l_continent = getContinent(p_continentName);\r\n                if(l_continent != null && l_continent.getD_countries() != null){\r\n                    for(Country c: l_continent.getD_countries()) {\r\n                        removeCountryAsNeighbourFromAll(c.getD_countryID());\r\n                        updateNeighbours(c.getD_countryID());\r\n                        d_countries.remove(c);\r\n                    }\r\n                }\r\n                return d_continents.remove(l_continent);\r\n            }\r\n        }\r\n        System.out.println(\"Continent with name \" + p_continentName + \"is not on the map\");\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * adds a country to the Map.\r\n     *\r\n     * @param p_countryName Name of Country to be added\r\n     * @param p_continentName Name of Continent to be added\r\n     *\r\n     */\r\n    public void addCountry(String p_countryName, String p_continentName) {\r\n        if(d_countries == null) {\r\n            d_countries = new ArrayList<>();\r\n        }\r\n        if(!countryExists(p_countryName)) {\r\n           int l_countryId = !d_countries.isEmpty() ? Collections.max(getCountryIDs()) + 1 : 1;\r\n            Continent l_continent = getContinent(p_continentName);\r\n            if (l_continent != null) {\r\n                Country l_country = new Country(l_countryId, p_countryName, l_continent.getD_continentID());\r\n                d_countries.add(l_country);\r\n                l_continent.addCountry(l_country);\r\n                System.out.println(\"[Map]: \" + p_countryName + \" added to Continent of \" + l_continent.getD_continentName());\r\n            }\r\n            else {\r\n                System.out.println(\"[Map]: Continent does not exist\");\r\n            }\r\n        }\r\n        else{\r\n            System.out.println(\"[Map]: Country already exists: \" + p_countryName);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * removes a country from the Map.\r\n     *\r\n     * @param p_countryName Name of country to be Added\r\n     */\r\n    public boolean removeCountry(String p_countryName) {\r\n        Country l_country = getCountry(p_countryName);\r\n        if (d_countries == null || l_country == null) {\r\n            return false;\r\n        }\r\n        for(Continent l_continent: d_continents) {\r\n            if(l_continent.getD_continentID() == l_country.getD_continentID()) {\r\n                l_continent.removeCountry(l_country);\r\n            }\r\n            l_continent.removeCountryAsNeighbourFromAll(l_country.getD_countryID());\r\n        }\r\n        removeCountryAsNeighbourFromAll(l_country.getD_countryID());\r\n        return d_countries.remove(l_country);\r\n    }\r\n    /**\r\n     * Adds a country as a Neighbour to another.\r\n     *\r\n     * @param p_countryName Country whose neighbours are to be updated\r\n     * @param p_neighbourName Country to be added as neighbour\r\n     */\r\n    public void addNeighbour(String p_countryName, String p_neighbourName) {\r\n        Country l_country = getCountry(p_countryName);\r\n        Country l_neighbour = getCountry(p_neighbourName);\r\n\r\n        if(l_country != null && l_neighbour != null) {\r\n            // Add both as neighbour to each other\r\n            l_country.addNeighbour(l_neighbour.getD_countryID());\r\n            l_neighbour.addNeighbour(l_country.getD_countryID());\r\n        }\r\n        else{\r\n            System.out.println(\"[Map]: At least one of these countries do not exist\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes a country as a Neighbor to another.\r\n     *\r\n     * @param p_countryName Country whose neighbors are to be updated\r\n     * @param p_neighbourName Country to be removed as neighbor\r\n     */\r\n    public void removeNeighbour(String p_countryName, String p_neighbourName) {\r\n        if(getCountry(p_countryName) != null && getCountry(p_neighbourName) != null){\r\n            Country l_country = getCountry(p_countryName);\r\n            Country l_neighbour = getCountry(p_neighbourName);\r\n\r\n            // Remove both as neighbour to each other\r\n            l_country.removeNeighbour(l_neighbour.getD_countryID());\r\n            l_neighbour.removeNeighbour(l_country.getD_countryID());\r\n        }\r\n        else{\r\n            System.out.println(\"[Map]: At least one of these countries do not exist\");\r\n        }\r\n    }\r\n\r\n    public void show() {\r\n        for (Continent continent: d_continents) {\r\n            System.out.println(continent.getD_continentName());\r\n            for (Country country: continent.getD_countries()) {\r\n                System.out.println(\"\\t\" + country);\r\n            }\r\n        }\r\n        System.out.println(\"\\n\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/models/Map.java b/src/main/java/models/Map.java
--- a/src/main/java/models/Map.java	(revision 1bc5c50a493e5e0ed8bad471b243ec5f8e87962f)
+++ b/src/main/java/models/Map.java	(date 1695944560172)
@@ -91,6 +91,7 @@
      * @param p_continent continent to add
      */
     public void addContinentToMap(Continent p_continent){
+
         d_continents.add(p_continent);
     }
 
@@ -122,6 +123,7 @@
      * @return Bool Value if map is valid
      */
     public Boolean validate() {
+
         //TODO: should be updated
         return true;
     }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"938d9b87-7aa9-4e2c-b5c5-93cb82f47297\" name=\"Changes\" comment=\"Country class and functions added\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/arena/WarzoneArena.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/arena/WarzoneArena.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/models/Continent.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/models/Continent.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/models/Country.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/models/Country.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/models/Map.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/models/Map.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/utils/CommandParser.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/utils/CommandParser.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"JUnit5 Test Class\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\"><![CDATA[{\r\n  \"associatedIndex\": 3\r\n}]]></component>\r\n  <component name=\"ProjectId\" id=\"2Vsb6uUdq0XSA9PLweEobqLLjUC\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"1\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"WebServerToolWindowFactoryState\": \"false\",\r\n    \"extract.method.default.visibility\": \"private\",\r\n    \"git-widget-placeholder\": \"warzone-mapcreation\",\r\n    \"last_opened_file_path\": \"/Users/kevin/Concordia/Sem-1/SOEN-6441/Innovators_Warzone\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CreateTestDialog.Recents.Supers\">\r\n      <recent name=\"\" />\r\n    </key>\r\n    <key name=\"CreateTestDialog.RecentsKey\">\r\n      <recent name=\"main.java.commands\" />\r\n      <recent name=\"tests.main.java.commands\" />\r\n      <recent name=\"tests.java.commands\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"All in Innovators_Warzone\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Innovators_Warzone\" />\r\n      <option name=\"PACKAGE_NAME\" value=\"\" />\r\n      <option name=\"TEST_OBJECT\" value=\"package\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"EditContinentCommandTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Innovators_Warzone\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"main.java.commands.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"main.java.commands\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"main.java.commands.EditContinentCommandTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"EditContinentCommandTest.test_givenRemoveFunctionality_whenExecuted_thenContinentRemoved\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Innovators_Warzone\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"main.java.commands.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"main.java.commands\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"main.java.commands.EditContinentCommandTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"test_givenRemoveFunctionality_whenExecuted_thenContinentRemoved\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.All in Innovators_Warzone\" />\r\n        <item itemvalue=\"JUnit.EditContinentCommandTest\" />\r\n        <item itemvalue=\"JUnit.EditContinentCommandTest.test_givenRemoveFunctionality_whenExecuted_thenContinentRemoved\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"938d9b87-7aa9-4e2c-b5c5-93cb82f47297\" name=\"Changes\" comment=\"\" />\r\n      <created>1695627567777</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1695627567777</updated>\r\n      <workItem from=\"1695670837048\" duration=\"5398000\" />\r\n      <workItem from=\"1695757626410\" duration=\"14350000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Country class and functions added\">\r\n      <created>1695647446148</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695647446148</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Country class and functions added\">\r\n      <created>1695647467894</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1695647467895</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"3\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Country class and functions added\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 1bc5c50a493e5e0ed8bad471b243ec5f8e87962f)
+++ b/.idea/workspace.xml	(date 1695943347306)
@@ -6,11 +6,8 @@
   <component name="ChangeListManager">
     <list default="true" id="938d9b87-7aa9-4e2c-b5c5-93cb82f47297" name="Changes" comment="Country class and functions added">
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/arena/WarzoneArena.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/arena/WarzoneArena.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/models/Continent.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/models/Continent.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/models/Country.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/models/Country.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/models/Map.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/models/Map.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/utils/CommandParser.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/utils/CommandParser.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/services/MapReader.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/services/MapReader.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -20,8 +17,8 @@
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
       <list>
-        <option value="JUnit5 Test Class" />
         <option value="Class" />
+        <option value="JUnit5 Test Class" />
       </list>
     </option>
   </component>
@@ -34,9 +31,6 @@
   <component name="ProblemsViewState">
     <option name="selectedTabId" value="CurrentFile" />
   </component>
-  <component name="ProjectColorInfo"><![CDATA[{
-  "associatedIndex": 3
-}]]></component>
   <component name="ProjectId" id="2Vsb6uUdq0XSA9PLweEobqLLjUC" />
   <component name="ProjectLevelVcsManager" settingsEditedManually="true">
     <ConfirmationsSetting value="1" id="Add" />
@@ -45,20 +39,11 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent"><![CDATA[{
-  "keyToString": {
-    "RunOnceActivity.ShowReadmeOnStart": "true",
-    "WebServerToolWindowFactoryState": "false",
-    "extract.method.default.visibility": "private",
-    "git-widget-placeholder": "warzone-mapcreation",
-    "last_opened_file_path": "/Users/kevin/Concordia/Sem-1/SOEN-6441/Innovators_Warzone",
-    "node.js.detected.package.eslint": "true",
-    "node.js.detected.package.tslint": "true",
-    "node.js.selected.package.eslint": "(autodetect)",
-    "node.js.selected.package.tslint": "(autodetect)",
-    "vue.rearranger.settings.migration": "true"
-  }
-}]]></component>
+  <component name="PropertiesComponent">
+    <property name="project.structure.last.edited" value="Modules" />
+    <property name="project.structure.proportion" value="0.0" />
+    <property name="project.structure.side.proportion" value="0.0" />
+  </component>
   <component name="RecentsManager">
     <key name="CreateTestDialog.Recents.Supers">
       <recent name="" />
@@ -69,7 +54,7 @@
       <recent name="tests.java.commands" />
     </key>
   </component>
-  <component name="RunManager">
+  <component name="RunManager" selected="JUnit.All in Innovators_Warzone">
     <configuration name="All in Innovators_Warzone" type="JUnit" factoryName="JUnit" temporary="true" nameIsGenerated="true">
       <module name="Innovators_Warzone" />
       <option name="PACKAGE_NAME" value="" />
@@ -126,7 +111,6 @@
       <option name="presentableId" value="Default" />
       <updated>1695627567777</updated>
       <workItem from="1695670837048" duration="5398000" />
-      <workItem from="1695757626410" duration="14350000" />
     </task>
     <task id="LOCAL-00001" summary="Country class and functions added">
       <created>1695647446148</created>
